---
format:
  html:
    theme: default
    toc: false
    css: index.css
    page-layout: full
---

```{=html}
<style>
  .intro-section {
    display: flex;
    flex-wrap: wrap;
    flex-direction: row; /* Critical for desktop layout */
    align-items: center;
    justify-content: center;
    gap: 2rem;
    padding: 2rem;
  }

  .intro-left {
    flex: 1 1 280px;
    display: flex;
    flex-direction: column;
    align-items: center;
    order: 1; /* Image should appear on the left */
  }

  .intro-right {
    flex: 2 1 300px;
    max-width: 700px;
    order: 2; /* Text should appear on the right */
  }

  /* Mobile-specific override: stack vertically */
  @media (max-width: 768px) {
    .intro-section {
      flex-direction: column;
      text-align: center;
    }

    .intro-left {
      order: 1; /* Image appears on top */
    }

    .intro-right {
      order: 2; /* Text appears below on mobile */
    }

    .intro-right p {
      text-align: center;
    }
  }




  .profile-img {
    width: 220px;
    height: 220px;
    border-radius: 50%;
    object-fit: cover;
    box-shadow: 0 0 10px rgba(0,0,0,0.4);
    margin-bottom: 16px;
  }

  .custom-badge {
    background: linear-gradient(to right, #2e2eff, #ec2aa7);
    color: white;
    font-weight: 700;
    padding: 10px 24px;
    border-radius: 999px;
    font-size: 1rem;
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    text-align: center;
    white-space: nowrap;
  }

  .intro-right {
    flex: 2 1 300px;
    max-width: 700px;
  }

  .intro-right p {
    text-align: justify;
  }

  .text-gradient {
    background: linear-gradient(to right, #141fd2, #e02892);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    font-weight: bold;
  }

  @media (max-width: 768px) {
    .intro-section {
      flex-direction: column;
      text-align: center;
    }

    .intro-right p {
      text-align: center;
    }
  }
  </style>

  <section class="intro-section">
    <!-- Left: Profile Image + Badge -->
    <div class="intro-left">
      <img class="profile-img" src="profile.jpg" alt="Profile picture" />
      <div class="custom-badge slide-in-up">
        <strong>DATA SCIENCE</strong> Â· <strong>BUSINESS INTELLIGENCE</strong>
      </div>
    </div>

    <!-- Right: Description -->
    <div class="intro-right">
      <p class="lead fw-light mb-2 text-justify-only"><strong>
        <h1 class="display-5 fw-bolder mb-4 text-start">
        <span class="text-gradient">From Data to Impact</span>
      </h1>
        I'm Mulimbika Makina, a Data Scientist with an MSc in Mathematics (Data Science Option),
        combining mathematical depth with statistical rigor to solve real-world problems.
      </strong></p>

      <p class="text-muted mb-0 text-justify-only">
        With expertise in <strong>Python</strong>, <strong>SQL</strong>, <strong>R</strong>,
        <strong>SPSS</strong>, <strong>STATA</strong>, <strong>Power BI</strong>, and
        <strong>Metabase</strong>, I build predictive models and intuitive dashboards that unlock real value.
      </p>

      <!-- Social icons (optional) -->
      <div class="d-flex justify-content-center mt-4">
        <div class="social-icons fs-3 d-flex gap-3">
          <a class="text-gradient" href="https://www.linkedin.com/in/mulimbika-makina-6a2507318" target="_blank"><i class="bi bi-linkedin"></i></a>
          <a class="text-gradient" href="https://github.com/makina0928" target="_blank"><i class="bi bi-github"></i></a>
        </div>
      </div>
    </div>
  </section>

```


<script>
function playBadge() {
  const el = document.querySelector('.custom-badge');
  if (!el) return;
  el.classList.remove('slide-in-up');   // remove
  void el.offsetWidth;                  // reflow to reset animation
  el.classList.add('slide-in-up');      // re-add to replay
}

// run on page load
document.addEventListener('DOMContentLoaded', playBadge);

// replay when Home is clicked (works for typical Quarto nav links)
document.addEventListener('click', (e) => {
  const a = e.target.closest('a');
  if (!a) return;

  const href = a.getAttribute('href') || '';
  const isHome = href === '/' || href === 'index.html' || href.endsWith('/index.qmd');
  if (isHome) {
    // if your site doesn't fully reload, replay the animation
    playBadge();
  }
});
</script>








```{=html}
<style>
  html, body {
    margin: 0;
    padding: 0;
    height: 100%;
    font-family: system-ui, sans-serif;
    background: #cce4f9;
  }
  

  #starfield {
    position: fixed;
    top: 0;
    left: 0;
    z-index: -1;
    width: 100%;
    height: 100%;
    pointer-events: none;
  }

  .container {
    position: relative;
    z-index: 1;
    text-align: center;
    padding-top: 100px;
  }

  .profile-img {
    width: 220px;
    height: 220px;
    border-radius: 50%;
    object-fit: cover;
    box-shadow: 0 0 10px rgba(0,0,0,0.4);
  }

  h1 {
    margin-top: 20px;
    font-size: 2em;
    font-weight: bold;
  }

  .social-links {
    margin-top: 20px;
    display: flex;
    justify-content: center;
    gap: 16px;
  }

  .social-links a {
    text-decoration: none;
    border: 1px solid #ccc;
    padding: 8px 16px;
    border-radius: 6px;
    color: #222;
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 8px;
    background: white;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    transition: background 0.3s;
  }

  .social-links a:hover {
    background: #f5f5f5;
  }

  .social-links i {
    font-size: 1.2em;
  }
</style>



<canvas id="starfield"></canvas>

<script>
const canvas = document.getElementById('starfield');
const ctx = canvas.getContext('2d');

let stars = [];
const numStars = 150;
const maxDistance = 100;

function resizeCanvas() {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
}

function createStars() {
  stars = [];
  for (let i = 0; i < numStars; i++) {
    const speed = Math.random() * 0.5 + 0.2;
    const angle = Math.random() * 2 * Math.PI;
    stars.push({
      x: Math.random() * canvas.width,
      y: Math.random() * canvas.height,
      radius: Math.random() * 1.5 + 0.5,
      dx: Math.cos(angle) * speed,
      dy: Math.sin(angle) * speed
    });
  }
}

function drawStars() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.fillStyle = "white";
  for (const star of stars) {
    ctx.beginPath();
    ctx.arc(star.x, star.y, star.radius, 0, 2 * Math.PI);
    ctx.fill();
  }

  for (let i = 0; i < stars.length; i++) {
    for (let j = i + 1; j < stars.length; j++) {
      const dx = stars[i].x - stars[j].x;
      const dy = stars[i].y - stars[j].y;
      const distance = Math.sqrt(dx * dx + dy * dy);
      if (distance < maxDistance) {
        ctx.beginPath();
        ctx.strokeStyle = `rgba(255, 255, 255, ${1 - distance / maxDistance})`;
        ctx.lineWidth = 0.5;
        ctx.moveTo(stars[i].x, stars[i].y);
        ctx.lineTo(stars[j].x, stars[j].y);
        ctx.stroke();
      }
    }
  }
}

function updateStars() {
  for (const star of stars) {
    star.x += star.dx;
    star.y += star.dy;

    if (star.x < 0) star.x = canvas.width;
    if (star.x > canvas.width) star.x = 0;
    if (star.y < 0) star.y = canvas.height;
    if (star.y > canvas.height) star.y = 0;
  }
}

function animate() {
  drawStars();
  updateStars();
  requestAnimationFrame(animate);
}

window.addEventListener('resize', () => {
  resizeCanvas();
  createStars();
});

resizeCanvas();
createStars();
animate();
</script>

